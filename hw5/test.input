\x:bool. if true then x else false;;
\f:bool->bool. \x : bool. f x;;
\f:bool->bool. \x : bool. if (f x) then f else (\y : bool. y);;

\f:bool->bool. \x : bool. if x then x else f;;
\f:bool->bool. \x : bool. if f then f else x;;
/\A. \f : A -> A. \x : A. f x;;

id = /\A. \x : A. x;;
Nat = forall A. (A -> A) -> A -> A;;
succ = \x : Nat. /\A. \s : A -> A. \z : A. s (x A s z);;
zero = /\A. \s : (A -> A). \z : A. z;;
one = succ zero;;

plus = \x : Nat. \y : Nat. /\A. \s : A -> A. \z : A. x A s (y A s z);;
two = plus one one;;

times = \x : Nat.\y : Nat. /\A. \s : A -> A. \z : A. x A (y A s) z;;

three = succ two;;

six = times two (succ two);;
sixteen = times two (times two (times two two));;
twenty = times (times two two) (plus three two);;
nine = times three three;;
large = times twenty sixteen;;
small = times one six;;

four = times two two;;

Bool = forall A. A -> A -> A;;
tru = /\A. \t : A. \f : A. t;;
fls = /\A. \t : A. \f : A. f;;

ite = /\A. \c : Bool. \x : A. \y : A. c A x y;;
is_zero = \x : Nat. x Bool (\z : Bool. fls) tru;;
result = is_zero zero;;
result_1 = is_zero one;;
result_4 =is_zero four;;

# Church encoding of a pair is a function that takes the first and second element of the pair and returns a function that operates the two elements. The function can be like `fst` or `snd`. 

# pair : A -> B -> Pair A B
# Pair A B : forall C. (A -> B -> C) -> C;;
pair = /\A. /\B. \car : A. \cdr : B. /\C. \f : (A -> B -> C). f car cdr;;
fst = /\A. /\B. \p : (forall C. (A -> B -> C) -> C). p A (\x : A. \y : B. x);;
snd = /\A. /\B. \p : (forall C. (A -> B -> C) -> C). p B (\x : A. \y : B. y);;

NatPair = forall C. (Nat -> Nat -> C) -> C;;

zerop = pair Nat Nat zero zero;;
succp = \p : NatPair. pair Nat Nat (succ (fst Nat Nat p)) (fst Nat Nat p);;

pred = \x : Nat. snd Nat Nat (x NatPair succp zerop);;

three = pred four;;
two = pred three;;

recoo = /\A. \n : A. pair A Nat n zero;;
recss = /\A. \f : Nat -> A -> A. \p : (forall C. (A -> Nat -> C) -> C). pair A Nat (f (snd A Nat p) (fst A Nat p)) (succ (snd A Nat p));;

natrec = /\A. \f : Nat -> A -> A. \n : A. \m : Nat. fst A Nat (m (forall C. (A -> Nat -> C) -> C) (recss A f) (recoo A n));;

factorial = \n : Nat. natrec Nat (\p : Nat. \q : Nat. times (succ p) q) one n;;

twenty_four = factorial four;;
six = factorial (succ two);;

# List A = forall B. (A -> B -> B) -> B -> B
nil = /\A. /\B. \f : (A -> B -> B). \x : B. x;;
cons = /\A. \x : A. \xs : (forall B. (A -> B -> B) -> B -> B). /\B. \f : A -> B -> B. \n : B. f x (xs B f n);;

map = /\A. /\B. \f : (A -> B). \xs : (forall B. (A -> B -> B) -> B -> B). xs (forall C. (B -> C -> C) -> C -> C) (\hd : A. \tl : (forall C. (B -> C -> C) -> C -> C). cons B (f hd) tl) (nil B);;

NatList = (forall B. (Nat -> B -> B) -> B -> B);;

# seq : Nat -> NatList

NatNatListPair = (forall C. (Nat -> NatList -> C) -> C);;

seqO = \x : Nat. pair Nat NatList (pred x) (nil Nat);;
seqS = \p : NatNatListPair. 
        pair Nat NatList 
            (pred (fst Nat NatList p)) 
            (cons Nat (fst Nat NatList p) (snd Nat NatList p));;

seq = \x : Nat. snd Nat NatList (x NatNatListPair seqS (seqO x));;

seq0 = seq zero;;
seq1 = seq one;;
seq2 = seq two;;
seq3 = seq three;;
seq4 = seq four;;

# length : forall A. List A -> Nat
length = /\A. \xs : (forall B. (A -> B -> B) -> B -> B). xs Nat (\hd : A. \tl : Nat. succ tl) zero;;

l0 = length Nat seq0;;
l1 = length Nat seq1;;
l2 = length Nat seq2;;
l3 = length Nat seq3;;
l4 = length Nat seq4;;

# factorial_via_seq : Nat -> Nat
factorial_via_seq = \x : Nat. (map Nat Nat succ (seq x)) Nat (\hd : Nat. \tl : Nat. times hd tl) one;;
factorial_via_seq four;; # equals to factorial four

# natcase : forall A. (Nat -> A) -> A -> Nat -> A
natcase = /\A. \f : (Nat -> A). \x : A. \n : Nat. natrec A (\p : Nat. \q : A. p A (\y : A. f p) x) x n;;

and = \x : Bool. \y : Bool. x Bool y fls;;
not = \x : Bool. x Bool fls tru;;
or  = \x : Bool. \y : Bool. x Bool tru y;;

and tru tru;;
and fls tru;;

or tru tru;;
or fls tru;;
or fls fls;;

not tru;;
not fls;;

eq = \x : Nat. \y : Nat. and (is_zero (x Nat pred y)) (is_zero (y Nat pred x));;

eq one one;;
eq two two;;
eq three three;;
eq four three;;

eq (factorial four) (factorial_via_seq four);;

neq = \x : Nat. \y : Nat. not (eq x y);;

neq one two;;
neq two two;;

# le : Nat -> Nat -> Bool
le = \x : Nat. \y : Nat. or (eq x y) (is_zero (y Nat pred x));;

le two one;;
le one two;;
le one four;;
le one one;;

# insert : Nat -> NatList -> NatList

is_nil = \l : NatList. l Bool (\x : Nat. \tl : Bool. fls) tru;;

BoolNatListPair = forall C. (Bool -> NatList -> C) -> C;;

insert_init = pair Bool NatList tru (nil Nat);;

insert = \x : Nat. \xs : NatList. 
            (is_nil xs) NatList 
                (cons Nat x xs) 
                (snd Bool NatList 
                    (xs BoolNatListPair 
                        (\hd : Nat. \tl : BoolNatListPair.
                            (le x hd) BoolNatListPair 
                                ((fst Bool NatList tl) BoolNatListPair 
                                    (pair Bool NatList 
                                        fls 
                                        (cons Nat hd (cons Nat x (snd Bool NatList tl)))) 
                                    (pair Bool NatList 
                                        fls 
                                        (cons Nat hd (snd Bool NatList tl)))) 
                                ((eq 
                                    (length Nat (snd Bool NatList tl)) 
                                    (pred (length Nat xs))) BoolNatListPair 
                                
                                    (pair Bool NatList 
                                        fls 
                                        (cons Nat x (cons Nat hd (snd Bool NatList tl)))) 
                                    (pair Bool NatList 
                                        (fst Bool NatList tl) 
                                        (cons Nat hd (snd Bool NatList tl))))) insert_init));;

insert one (nil Nat);;

inserted = (insert three (cons Nat four (cons Nat two (cons Nat one (nil Nat)))));;
map Nat Nat (\x : Nat. succ x) inserted;;

five = succ four;;

lst = (cons Nat five (cons Nat one (cons Nat four (cons Nat two (cons Nat three (nil Nat))))));;

is_nil lst;;
is_nil (nil Nat);;

insert two (insert one (nil Nat));;

insert one (insert four (insert two (insert three (nil Nat))));;

# insertion_sort : NatList -> NatList
insertion_sort = \xs : NatList. xs NatList (\x : Nat. \tl : NatList. insert x tl) (nil Nat);;

insertion_sort lst;;

# append : List A -> List A
append = /\A. \xs : (forall B. (A -> B -> B) -> B -> B).
            \ys : (forall B. (A -> B -> B) -> B -> B).
                xs (forall B. (A -> B -> B) -> B -> B)
                   (\x : A. \tl : (forall B. (A -> B -> B) -> B -> B).
                        cons A x tl) ys;;

append Nat lst (insertion_sort lst);;

# revserse : List A -> List A
reverse = /\A. \xs : (forall B. (A -> B -> B) -> B -> B).
                    xs (forall B. (A -> B -> B) -> B -> B)
                       (\x : A. \tl : (forall B. (A -> B -> B) -> B -> B).
                            append A tl (cons A x (nil A)))
                       (nil A);;

reverse Nat (insertion_sort lst);;

append Nat (seq four) (seq four);;
reverse Nat (append Nat (seq four) (seq four));;

# Tree A = forall B. B -> (B -> A -> B -> B) -> B
leaf = /\A. /\B. \l : B. \f : (B -> A -> B -> B). l;;

# branch : forall A. Tree A -> A -> Tree A -> Tree A
branch = /\A.
        \lchild : (forall B. B -> (B -> A -> B -> B) -> B).
        \node : A.
        \rchild : (forall B. B -> (B -> A -> B -> B) -> B).
            /\B. \l : B. \f : (B -> A -> B -> B).
                f (lchild B l f) node (rchild B l f);;

size = /\A. \tree : (forall B. B -> (B -> A -> B -> B) -> B).
        tree Nat one (\lcnt : Nat. \y : A. \rcnt : Nat. succ (plus lcnt rcnt));;

NatTree = forall B. B -> (B -> Nat -> B -> B) -> B;;

natTree = (
    branch Nat 
    (branch Nat 
        (leaf Nat) four 
        (branch Nat 
            (leaf Nat)
            two
            (leaf Nat)))
    one
    (leaf Nat)
);;

size Nat natTree;;

# sum : NatTree -> Nat
sum = \tree : NatTree.
        tree Nat zero (\lsum : Nat. \node : Nat. \rsum : Nat. plus node (plus lsum rsum));;

sum natTree;;

# treerec : forall A. forall B. B -> (Tree A -> B -> A -> Tree A -> B -> B) -> Tree A -> B

treerecO = /\B./\A. \n : B. 
            pair (forall C. C -> (C -> A -> C -> C) -> C) B
            (leaf A) n;;

treerecS = /\B. /\A.
            \f : (forall C. C -> (C -> A -> C -> C) -> C) -> B -> A
              -> (forall C. C -> (C -> A -> C -> C) -> C) -> B -> B.
            \lchild : (forall D. ((forall C. C -> (C -> A -> C -> C) -> C) -> B -> D) -> D).
            \node : A.
            \rchild : (forall D. ((forall C. C -> (C -> A -> C -> C) -> C) -> B -> D) -> D).
            pair (forall C. C -> (C -> A -> C -> C) -> C) B
                 (branch A (fst (forall C. C -> (C -> A -> C -> C) -> C) B lchild) node (fst (forall C. C -> (C -> A -> C -> C) -> C) B rchild))
                 (f 
                    (fst (forall C. C -> (C -> A -> C -> C) -> C) B lchild) 
                    (snd (forall C. C -> (C -> A -> C -> C) -> C) B lchild)
                    node
                    (fst (forall C. C -> (C -> A -> C -> C) -> C) B rchild) 
                    (snd (forall C. C -> (C -> A -> C -> C) -> C) B rchild));;


treerec = /\A. /\B.
            \x : B.
            \f : ((forall C. C -> (C -> A -> C -> C) -> C)
                    -> B -> A
                    -> (forall C. C -> (C -> A -> C -> C) -> C)
                    -> B -> B). 
            \tree : (forall C. C -> (C -> A -> C -> C) -> C).
            snd (forall C. C -> (C -> A -> C -> C) -> C) B (tree (forall D. ((forall C. C -> (C -> A -> C -> C) -> C) -> B -> D) -> D) (treerecO B A x) (treerecS B A f));;

BoolNatTreePair = (forall B. (Bool -> NatTree -> B) -> B);;
insertTreeInit = pair Bool NatTree tru (leaf Nat);;

is_leaf = \tree : NatTree. tree Bool tru (\l : Bool. \node : Nat. \r : Bool. fls);;

is_leaf = \tree : NatTree. tree Bool tru (\l : Bool. \node : Nat. \r : Bool. fls);;

is_leaf (leaf Nat);;
is_leaf (natTree);;

nat_branch = branch Nat;;
nat_leaf = leaf Nat;;

# insert_tree_helper : Nat -> NatTree -> NatTree
insert_tree_helper = \x : Nat. \tree : NatTree.
                snd Bool NatTree
                (treerec Nat BoolNatTreePair insertTreeInit
                    (\lson : NatTree. \ltree : BoolNatTreePair.
                    \node : Nat.
                    \rson : NatTree. \rtree : BoolNatTreePair.
                    (le x node) BoolNatTreePair 
                        (
                            (fst Bool NatTree ltree) BoolNatTreePair
                                (pair Bool NatTree fls (nat_branch (nat_branch nat_leaf x nat_leaf) node rson))
                                (pair Bool NatTree fls (nat_branch (snd Bool NatTree ltree) node rson))
                        )
                        (
                            (fst Bool NatTree rtree) BoolNatTreePair
                                (pair Bool NatTree fls (nat_branch lson node (nat_branch nat_leaf x nat_leaf)))
                                (pair Bool NatTree fls (nat_branch lson node (snd Bool NatTree rtree)))
                        ))
                    tree);;

insert_tree = \x : Nat. \tree : NatTree.
                (is_leaf tree) NatTree
                (nat_branch nat_leaf x nat_leaf)
                (insert_tree_helper x tree);;

# insert_all_tree : NatList -> NatTree

insert_all_tree = \xs : NatList. xs NatTree (\x : Nat. \tree : NatTree. insert_tree x tree) (leaf Nat);;

insert_all_tree (seq four);;

# tree_to_list : NatTree -> NatList
tree_to_list = \tree : NatTree. tree NatList (nil Nat) 
                (\lst : NatList. \node : Nat. \rst : NatList. append Nat lst (append  Nat (cons Nat node (nil Nat)) rst));;

tree_to_list natTree;;

# tree_sort : NatList -> NatList
tree_sort = \xs : NatList. tree_to_list (insert_all_tree xs);;

tree_sort (append Nat (seq four) (seq four));;